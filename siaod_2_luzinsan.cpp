#include <iostream>
#include <fstream> 
#include "QueueNode.h"
/*
* Вариант 8. Используя очередь, решить следующую задачу.
* За один просмотр файла с данными 
* и без использования дополнительных файлов 
* напечатать элементы этого файла в следующем порядке:
* 
** Сначала – все числа, меньшие A, 
*** Затем – все числа из отрезка [A, B], 
**** И наконец – все остальные числа.
* 
* A и B – вводятся с клавиатуры (A < B).
* Для реализации АТД Очередь использовать динамическое распределение памяти.
*/

using namespace luzinsan;
int main()
{
	setlocale(LC_ALL, "Rus");

	std::ifstream FileIn("inputDATA.txt");
	if (!FileIn.is_open())
		std::cout << "Входной файл не может быть открыт!\n";
	else
	{
		std::cout << "\n\tВариант 8. Используя очередь, решить следующую задачу."
			<< "\n\tЗа один просмотр файла с данным и без использования дополнительных файлов"
			<< "\n\tнапечатать элементы этого файла в следующем порядке"
			<< "\n\t* Сначала – все числа, меньшие A,"
			<< "\n\t** Затем – все числа из отрезка[A, B],"
			<< "\n\t*** И наконец – все остальные числа."
			<< "\n\tA и B – вводятся с клавиатуры(A < B).";

		QueueNode queue;
		std::cout << "\n\tВведите целое число А: ";
		int A;
		std::cin >> A;
		queue.SetA(A);
		std::cout << "\n\tТеперь введите целое число В: ";
		int B;
		std::cin >> B;
		queue.SetB(B);

		
		int number; int count = 0;
		std::cout << "\nИсходные данные: \n";
		while (!FileIn.eof())
		{// Проводим полное считывание данных с очередь
			FileIn >> number;
			count++;
			queue.EnQueue(number);
			std::cout << number << ' ';
		}

		std::cout << "\nОбработанные данные: \n";
		for(; count; count--)
			std::cout << queue.DeQueue() << ' ';
			
	}
	FileIn.close();
	return 0;
}

